{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,qBAC9BE,KAAMH,SAASC,cAAc,oBAC7BG,OAAQJ,SAASC,cAAc,uBAKjC,SAASI,EAAcC,EAAUJ,GAC/B,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAIpCJ,EAAQ,CAAEF,WAAUJ,UAEpBO,EAAO,CAAEH,WAAUJ,S,GAEpBA,E,IAbPJ,EAAKC,KAAKc,iBAAiB,UAiB3B,SAAsBC,GACpBA,EAAIC,iBAMJ,IAJA,IAAIC,EAAWC,OAAOnB,EAAKI,MAAMgB,OAC7BC,EAAUF,OAAOnB,EAAKK,KAAKe,OAC3BE,EAAYH,OAAOnB,EAAKM,OAAOc,OAE1BA,EAAQ,EAAGA,GAASE,EAAWF,GAAS,EAC/Cb,EAAca,EAAOF,GAClBK,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUJ,EAAKoB,EAALpB,MACjBN,EAAA2B,OAAOC,QAAQ,uBAAwCC,OAAfnB,EAAS,QAAYmB,OAANvB,EAAM,OAC3DwB,QAAMC,IAAI,uBAAwCF,OAAfnB,EAAS,QAAYmB,OAANvB,EAAM,M,IAE3D0B,OAAM,SAAAN,G,IAAGhB,EAAQgB,EAARhB,SAAUJ,EAAKoB,EAALpB,MAClBN,EAAA2B,OAAOM,QAAQ,sBAAuCJ,OAAfnB,EAAS,QAAYmB,OAANvB,EAAM,OAC1DwB,QAAMC,IAAI,sBAAuCF,OAAfnB,EAAS,QAAYmB,OAANvB,EAAM,M,IAE7Dc,GAAYG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=delay]'),\n  step: document.querySelector('input[name=step]'),\n  amount: document.querySelector('input[name=amount]'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n  \n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  let inpDelay = Number(refs.delay.value);\n  let inpStep = Number(refs.step.value);\n  let inpAmount = Number(refs.amount.value);\n\n  for (let value = 1; value <= inpAmount; value += 1) {\n    createPromise(value, inpDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    inpDelay += inpStep;\n  }\n}\n\n\n\n// с КОММЕНТАРИЯМИ=====================================================================================================\n// // импортируем библиотеку оповещений (всплывающие окна)\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// // получаем ссылки на DOM-дерево\n// const refs = {\n//   form: document.querySelector('.form'),\n//   delay: document.querySelector('input[name=delay]'),\n//   step: document.querySelector('input[name=step]'),\n//   amount: document.querySelector('input[name=amount]'),\n// };\n\n// // устанавливаем слушателя на кнопку отправки формы, после чего будет \n// // отрабатывать ф-я onFormSubmit\n// refs.form.addEventListener('submit', onFormSubmit);\n\n// // Ф-я создания промиса \n// function createPromise(position, delay) {\n//   // возврат промиса (вернется в место вызова ф-ии createPromise(value, inpDelay) )\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n\n//       if (shouldResolve) {\n  // в resolve можно вернуть только одно значение: число, строку, или объект (что мы и делаем)!!!!!!!! //\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n// // Ф-я отправки формы\n// function onFormSubmit(evt) {\n//   // отклюяаем перезагрузку страницы при отправке формы\n//   evt.preventDefault();\n\n//   // в переменные запишем значения, которые будем вводить в инпуты нашей формы,\n//   // чтобы далее работать с ними в цыкле\n// также все значения приводим к числам, т.к. по умолчанию они будут строками,\n// что может усложнить работу в цикле особенно тогда, когда число нужно сложить,\n// ведь строки складываются по другому (конкатенация строк)\n//   let inpDelay = Number(refs.delay.value);\n//   let inpStep = Number(refs.step.value);\n//   let inpAmount = Number(refs.amount.value);\n\n\n//   // далее, через цикл for переберем элементы нашей формы,\n//   // где value = 1 - начальная итерация, value <= evtAmount - количество итераций,\n//   // которое необходимо осуществить (не больше, чем мы ввели в инпут amount)\n//   for (let value = 1; value <= inpAmount; value += 1) {\n//     // Вызываем ф-ю createPromise внутри цикла, передавая в параметр position аргумент value -->\n//     // (при отображении каждого промиса его номером(position) и будет value)\n//     // а в параметр delay каждый раз будем передавать новое значение - аргумент inpDelay,\n//     // который при каждой итерации будет увеличиваться на inpStep - шаг задержки, который мы вводим в форму \n//     createPromise(value, inpDelay)\n//       // при успешном промисе будем выводить след. сообщение\n// то есть в then мы передаем значение из resolve - то есть объект\n//       .then(({ position, delay }) => {\n  // к значеним объекта обращаемся через их свойства - position и delay\n//         Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//         console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       // при неуспешном промисе будем выводить след. сообщение\n// то есть в catch мы передаем значение из reject - то есть объект\n//       .catch(({ position, delay }) => {\n//         Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//         console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//     inpDelay += inpStep;\n//   }\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","setTimeout","Math","random","addEventListener","evt","preventDefault","inpDelay","Number","value","inpStep","inpAmount","then","param","Notify","success","concat","console","log","catch","failure"],"version":3,"file":"03-promises.162f7876.js.map"}